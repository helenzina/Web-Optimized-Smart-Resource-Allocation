[
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ExcelReader",
        "importPath": "excel_reader",
        "description": "excel_reader",
        "isExtraImport": true,
        "detail": "excel_reader",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Solver",
        "importPath": "solver",
        "description": "solver",
        "isExtraImport": true,
        "detail": "solver",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "course",
        "description": "course",
        "isExtraImport": true,
        "detail": "course",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "student",
        "description": "student",
        "isExtraImport": true,
        "detail": "student",
        "documentation": {}
    },
    {
        "label": "SCALING_FACTOR",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "SCALING_FACTOR = 100\nstudents = [\"20046\", \"21110\", \"20000\"]\nstudents_gpa = [8.83, 6, 7.5]\nstudents_gpa_scaled = [x * SCALING_FACTOR for x in students_gpa]\nall_students = range(len(students))\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nall_courses = range(len(courses))\ncourses_min_students = [1, 1, 1] # min students for each course (int)",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "students = [\"20046\", \"21110\", \"20000\"]\nstudents_gpa = [8.83, 6, 7.5]\nstudents_gpa_scaled = [x * SCALING_FACTOR for x in students_gpa]\nall_students = range(len(students))\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nall_courses = range(len(courses))\ncourses_min_students = [1, 1, 1] # min students for each course (int)\ncourses_max_students = [3, 3, 3] # max students for each course (int)",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "students_gpa",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "students_gpa = [8.83, 6, 7.5]\nstudents_gpa_scaled = [x * SCALING_FACTOR for x in students_gpa]\nall_students = range(len(students))\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nall_courses = range(len(courses))\ncourses_min_students = [1, 1, 1] # min students for each course (int)\ncourses_max_students = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "students_gpa_scaled",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "students_gpa_scaled = [x * SCALING_FACTOR for x in students_gpa]\nall_students = range(len(students))\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nall_courses = range(len(courses))\ncourses_min_students = [1, 1, 1] # min students for each course (int)\ncourses_max_students = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "all_students",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "all_students = range(len(students))\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nall_courses = range(len(courses))\ncourses_min_students = [1, 1, 1] # min students for each course (int)\ncourses_max_students = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "required_courses_per_student",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "required_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nall_courses = range(len(courses))\ncourses_min_students = [1, 1, 1] # min students for each course (int)\ncourses_max_students = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "extra_courses_per_student",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "extra_courses_per_student = [3, 2, 0] \ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nall_courses = range(len(courses))\ncourses_min_students = [1, 1, 1] # min students for each course (int)\ncourses_max_students = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "courses",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "courses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nall_courses = range(len(courses))\ncourses_min_students = [1, 1, 1] # min students for each course (int)\ncourses_max_students = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "all_courses",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "all_courses = range(len(courses))\ncourses_min_students = [1, 1, 1] # min students for each course (int)\ncourses_max_students = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "courses_min_students",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "courses_min_students = [1, 1, 1] # min students for each course (int)\ncourses_max_students = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\nall_preferences = range(len(preferences_rank[0]))",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "courses_max_students",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "courses_max_students = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\nall_preferences = range(len(preferences_rank[0]))\n# constraints",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "model = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\nall_preferences = range(len(preferences_rank[0]))\n# constraints\n# each student i must attend exactly xi courses",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "allocation",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "allocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\nall_preferences = range(len(preferences_rank[0]))\n# constraints\n# each student i must attend exactly xi courses\n# for s in all_students:",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "preferences_rank",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "preferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\nall_preferences = range(len(preferences_rank[0]))\n# constraints\n# each student i must attend exactly xi courses\n# for s in all_students:\n#     model.add(sum(allocation[s][c] for c in all_courses) == required_courses_per_student[s])",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "all_preferences",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "all_preferences = range(len(preferences_rank[0]))\n# constraints\n# each student i must attend exactly xi courses\n# for s in all_students:\n#     model.add(sum(allocation[s][c] for c in all_courses) == required_courses_per_student[s])\n# m<=course_capacity<=M\n# for c in all_courses:\n#     # each course has min students m (courses_min_students[c])\n#     model.add(sum(allocation[s][c] for s in all_students) >= courses_min_students[c])\n#     # each course has max students M (courses_max_students[c])",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "solver = cp_model.CpSolver()\nstatus = solver.solve(model)\nif status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:\n    maximized_gpa_allocation = [[solver.value(allocation[s][c]) for c in all_courses] for s in all_students]\n    for s in all_students:\n        for c in all_courses:\n            model.add_hint(allocation[s][c], maximized_gpa_allocation[s][c])\n    # minimize student allocation based on their preferences\n    model.minimize(\n        sum(preferences_rank[s][c] * allocation[s][c]",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "status",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "status = solver.solve(model)\nif status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:\n    maximized_gpa_allocation = [[solver.value(allocation[s][c]) for c in all_courses] for s in all_students]\n    for s in all_students:\n        for c in all_courses:\n            model.add_hint(allocation[s][c], maximized_gpa_allocation[s][c])\n    # minimize student allocation based on their preferences\n    model.minimize(\n        sum(preferences_rank[s][c] * allocation[s][c]\n            for s in all_students",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class Model:\n    def __init__(self, students, courses, preferences_rank):\n        self.model = cp_model.CpModel()\n        self.students = students\n        self.all_students = range(len(students))\n        self.SCALING_FACTOR = 100\n        self.courses = courses\n        self.all_courses = range(len(courses))\n        self.preferences_rank = preferences_rank\n        self.all_preferences_rank = range(len(preferences_rank))",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Solver",
        "kind": 6,
        "importPath": "solver",
        "description": "solver",
        "peekOfCode": "class Solver:\n    def __init__(self, Model):\n        self.Model = Model\n    def solve_model(self):\n        # e.g students = self.Model.students\n        solver = cp_model.CpSolver()\n        status = solver.solve(self.Model.model)\n        if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:\n            pass",
        "detail": "solver",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class App:\n    def __init__(\n        self,\n        filepath,\n        students_file_name,\n        students_sheet_name,\n        courses_file_name,\n        courses_sheet_name,\n        preferences_file_name,\n        preferences_sheet_name,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "course",
        "description": "course",
        "peekOfCode": "class Course:\n    def __init__(self, id, name, min_students, max_students):\n        self.id = id\n        self.name = name\n        self.min_students = min_students\n        self.max_students = max_students",
        "detail": "course",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "student",
        "description": "student",
        "peekOfCode": "class Student:\n    def __init__(self, id, fullname, semester, required_courses, extra_courses):\n        self.id = id\n        self.fullname = fullname\n        self.gpa = None\n        self.semester = semester\n        self.preferences_rank = []\n        self.required_courses = required_courses\n        self.extra_courses = extra_courses\n    def set_gpa(self, gpa):",
        "detail": "student",
        "documentation": {}
    },
    {
        "label": "ExcelWriter",
        "kind": 6,
        "importPath": "excel_writer",
        "description": "excel_writer",
        "peekOfCode": "class ExcelWriter:\n    def __init__(self, file_name):\n        self.file_name = file_name\n    def write_data(self):\n        # e.g. data.to_excel(self.file_name)\n        pass",
        "detail": "excel_writer",
        "documentation": {}
    },
    {
        "label": "ExcelReader",
        "kind": 6,
        "importPath": "excel_reader",
        "description": "excel_reader",
        "peekOfCode": "class ExcelReader:\n    def __init__(self, file_name, sheet_name):\n        self.file_name = file_name\n        self.sheet_name = sheet_name\n    def read_students(self):\n        try:\n            df = pd.read_excel(self.file_name, self.sheet_name)\n            data_sheets = []\n            for sheet in df.keys():\n                data_sheets.append(pd.read_excel(self.file_name, sheet))",
        "detail": "excel_reader",
        "documentation": {}
    }
]