[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ExcelReader",
        "importPath": "excel_reader",
        "description": "excel_reader",
        "isExtraImport": true,
        "detail": "excel_reader",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Solver",
        "importPath": "solver",
        "description": "solver",
        "isExtraImport": true,
        "detail": "solver",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl.reader.excel",
        "description": "openpyxl.reader.excel",
        "isExtraImport": true,
        "detail": "openpyxl.reader.excel",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl.reader.excel",
        "description": "openpyxl.reader.excel",
        "isExtraImport": true,
        "detail": "openpyxl.reader.excel",
        "documentation": {}
    },
    {
        "label": "ExcelWriterCharts",
        "importPath": "excel_writer_charts",
        "description": "excel_writer_charts",
        "isExtraImport": true,
        "detail": "excel_writer_charts",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "course",
        "description": "course",
        "isExtraImport": true,
        "detail": "course",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "student",
        "description": "student",
        "isExtraImport": true,
        "detail": "student",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "ExcelWriter",
        "importPath": "excel_writer",
        "description": "excel_writer",
        "isExtraImport": true,
        "detail": "excel_writer",
        "documentation": {}
    },
    {
        "label": "PieChart",
        "importPath": "openpyxl.chart",
        "description": "openpyxl.chart",
        "isExtraImport": true,
        "detail": "openpyxl.chart",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "openpyxl.chart",
        "description": "openpyxl.chart",
        "isExtraImport": true,
        "detail": "openpyxl.chart",
        "documentation": {}
    },
    {
        "label": "BarChart",
        "importPath": "openpyxl.chart",
        "description": "openpyxl.chart",
        "isExtraImport": true,
        "detail": "openpyxl.chart",
        "documentation": {}
    },
    {
        "label": "DataLabelList",
        "importPath": "openpyxl.chart.label",
        "description": "openpyxl.chart.label",
        "isExtraImport": true,
        "detail": "openpyxl.chart.label",
        "documentation": {}
    },
    {
        "label": "Legend",
        "importPath": "openpyxl.chart.legend",
        "description": "openpyxl.chart.legend",
        "isExtraImport": true,
        "detail": "openpyxl.chart.legend",
        "documentation": {}
    },
    {
        "label": "DataPoint",
        "importPath": "openpyxl.chart.marker",
        "description": "openpyxl.chart.marker",
        "isExtraImport": true,
        "detail": "openpyxl.chart.marker",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "allocation.app",
        "description": "allocation.app",
        "peekOfCode": "class App:\n    def __init__(\n        self,\n        filepath,\n        students_file_name,\n        students_sheet_name,\n        courses_file_name,\n        courses_sheet_name,\n        preferences_file_name,\n        preferences_sheet_name,",
        "detail": "allocation.app",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "allocation.course",
        "description": "allocation.course",
        "peekOfCode": "class Course:\n    def __init__(self, course_id, course_name, min_students, max_students):\n        self.course_id = course_id\n        self.course_name = course_name\n        self.min_students = min_students\n        self.max_students = max_students",
        "detail": "allocation.course",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "allocation.student",
        "description": "allocation.student",
        "peekOfCode": "class Student:\n    def __init__(self, student_id, fullname, semester, courses_needed, passed_courses_on_sem8, choices_remaining):\n        self.student_id = student_id\n        self.fullname = fullname\n        self.gpa = None\n        self.SCALING_FACTOR = 100\n        self.scaled_gpa = None\n        self.semester = semester\n        self.preferences = {}\n        self.courses_needed = courses_needed",
        "detail": "allocation.student",
        "documentation": {}
    },
    {
        "label": "ExcelWriter",
        "kind": 6,
        "importPath": "allocation.excel_writer",
        "description": "allocation.excel_writer",
        "peekOfCode": "class ExcelWriter:\n    def __init__(self, model_obj, solver):\n        self.data_path = os.getcwd() + \"\\\\data_excels\\\\\"\n        self.results_file_path = self.data_path + \"output.xlsx\"\n        self.model_obj = model_obj\n        self.solver = solver\n        self.add_charts = ExcelWriterCharts(self.results_file_path)\n    def write_results(self):\n        results_data = []\n        for c in self.model_obj.all_courses:",
        "detail": "allocation.excel_writer",
        "documentation": {}
    },
    {
        "label": "ExcelReader",
        "kind": 6,
        "importPath": "allocation.excel_reader",
        "description": "allocation.excel_reader",
        "peekOfCode": "class ExcelReader:\n    def __init__(self, file_name, sheet_name):\n        self.file_name = file_name\n        self.sheet_name = sheet_name\n    def read_students(self):\n        try:\n            df_sheets = pd.read_excel(self.file_name, self.sheet_name)\n            # reformatting the dictionary of the students excel to drop rows where id is nan for each sheet\n            df_sheets = {sheet: df.dropna(subset=[\"ID\"]) for sheet, df in df_sheets.items()}\n            data_sheets = list(df_sheets.values())",
        "detail": "allocation.excel_reader",
        "documentation": {}
    },
    {
        "label": "Solver",
        "kind": 6,
        "importPath": "allocation.solver",
        "description": "allocation.solver",
        "peekOfCode": "class Solver:\n    def __init__(self, model_obj):\n        self.model_obj = model_obj\n        self.solver = cp_model.CpSolver()\n        self.status = None\n    def solve_model(self):\n        # maximize student allocation based on their gpa and\n        # minimize student allocation based on their preferences\n        self.model_obj.model.maximize(\n            sum(",
        "detail": "allocation.solver",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "allocation.model",
        "description": "allocation.model",
        "peekOfCode": "class Model:\n    def __init__(self, students, courses):\n        self.model = cp_model.CpModel()\n        self.students = students\n        self.all_students = range(len(students))\n        self.courses = courses\n        self.all_courses = range(len(courses))\n        self.allocation = []\n    def build_model(self):\n        # sorting students based on their gpa in descending order",
        "detail": "allocation.model",
        "documentation": {}
    },
    {
        "label": "ExcelWriterCharts",
        "kind": 6,
        "importPath": "allocation.excel_writer_charts",
        "description": "allocation.excel_writer_charts",
        "peekOfCode": "class ExcelWriterCharts:\n    def __init__(self, results_file_path):\n        self.results_file_path = results_file_path\n    def add_top_6_preferences_sat_pie_chart(self, top_6_preferences_satisfaction_ratios):\n        try:\n            wb = load_workbook(self.results_file_path)\n            ws = wb[\"Preferences Satisfaction\"]\n            if top_6_preferences_satisfaction_ratios:\n                avg_preferences_met = round(\n                    sum(top_6_preferences_satisfaction_ratios) / len(top_6_preferences_satisfaction_ratios), 2",
        "detail": "allocation.excel_writer_charts",
        "documentation": {}
    }
]