[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "allocation.ortools_sat.model",
        "description": "allocation.ortools_sat.model",
        "isExtraImport": true,
        "detail": "allocation.ortools_sat.model",
        "documentation": {}
    },
    {
        "label": "Solver",
        "importPath": "allocation.ortools_sat.solver",
        "description": "allocation.ortools_sat.solver",
        "isExtraImport": true,
        "detail": "allocation.ortools_sat.solver",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "allocation.student_course.course",
        "description": "allocation.student_course.course",
        "isExtraImport": true,
        "detail": "allocation.student_course.course",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "allocation.student_course.course",
        "description": "allocation.student_course.course",
        "isExtraImport": true,
        "detail": "allocation.student_course.course",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "allocation.student_course.student",
        "description": "allocation.student_course.student",
        "isExtraImport": true,
        "detail": "allocation.student_course.student",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "allocation.student_course.student",
        "description": "allocation.student_course.student",
        "isExtraImport": true,
        "detail": "allocation.student_course.student",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl.reader.excel",
        "description": "openpyxl.reader.excel",
        "isExtraImport": true,
        "detail": "openpyxl.reader.excel",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl.reader.excel",
        "description": "openpyxl.reader.excel",
        "isExtraImport": true,
        "detail": "openpyxl.reader.excel",
        "documentation": {}
    },
    {
        "label": "PieChart",
        "importPath": "openpyxl.chart",
        "description": "openpyxl.chart",
        "isExtraImport": true,
        "detail": "openpyxl.chart",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "openpyxl.chart",
        "description": "openpyxl.chart",
        "isExtraImport": true,
        "detail": "openpyxl.chart",
        "documentation": {}
    },
    {
        "label": "BarChart",
        "importPath": "openpyxl.chart",
        "description": "openpyxl.chart",
        "isExtraImport": true,
        "detail": "openpyxl.chart",
        "documentation": {}
    },
    {
        "label": "DataLabelList",
        "importPath": "openpyxl.chart.label",
        "description": "openpyxl.chart.label",
        "isExtraImport": true,
        "detail": "openpyxl.chart.label",
        "documentation": {}
    },
    {
        "label": "Legend",
        "importPath": "openpyxl.chart.legend",
        "description": "openpyxl.chart.legend",
        "isExtraImport": true,
        "detail": "openpyxl.chart.legend",
        "documentation": {}
    },
    {
        "label": "DataPoint",
        "importPath": "openpyxl.chart.marker",
        "description": "openpyxl.chart.marker",
        "isExtraImport": true,
        "detail": "openpyxl.chart.marker",
        "documentation": {}
    },
    {
        "label": "get_column_letter",
        "importPath": "openpyxl.utils",
        "description": "openpyxl.utils",
        "isExtraImport": true,
        "detail": "openpyxl.utils",
        "documentation": {}
    },
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "ExcelWriter",
        "importPath": "allocation.excel_writer.excel_writer",
        "description": "allocation.excel_writer.excel_writer",
        "isExtraImport": true,
        "detail": "allocation.excel_writer.excel_writer",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "allocation.app.app",
        "description": "allocation.app.app",
        "isExtraImport": true,
        "detail": "allocation.app.app",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "web_allocation_project.allocation.app.app",
        "description": "web_allocation_project.allocation.app.app",
        "peekOfCode": "class App:\n    def __init__(self, *args):\n        if len(args) == 0:\n            pass\n        else:\n            self.sem = args[6]\n            self.min_stud = args[7]\n            self.max_stud = args[8]\n            self.students = self.load_data(args[0], args[1], \"students\")\n            self.courses = self.load_data(args[2], args[3], \"courses\")",
        "detail": "web_allocation_project.allocation.app.app",
        "documentation": {}
    },
    {
        "label": "ExcelReader",
        "kind": 6,
        "importPath": "web_allocation_project.allocation.app.excel_reader",
        "description": "web_allocation_project.allocation.app.excel_reader",
        "peekOfCode": "class ExcelReader:\n    def __init__(self, file_name, sheet_name, sem, min_stud, max_stud):\n        self.file_name = file_name\n        self.sheet_name = sheet_name\n        self.sem = sem\n        self.min_stud = min_stud\n        self.max_stud = max_stud\n    def read_students(self):\n        try:\n            df_sheets = pd.read_excel(self.file_name, self.sheet_name)",
        "detail": "web_allocation_project.allocation.app.excel_reader",
        "documentation": {}
    },
    {
        "label": "ExcelWriter",
        "kind": 6,
        "importPath": "web_allocation_project.allocation.excel_writer.excel_writer",
        "description": "web_allocation_project.allocation.excel_writer.excel_writer",
        "peekOfCode": "class ExcelWriter:\n    def __init__(self, model_obj, solver):\n        self.data_path = os.getcwd()\n        self.results_file_path = self.data_path + \"\\output.xlsx\"\n        self.model_obj = model_obj\n        self.solver = solver\n        self.add_charts = ExcelWriterCharts(self.results_file_path)\n    def write_results(self):\n        results_data = []\n        for c in self.model_obj.all_courses:",
        "detail": "web_allocation_project.allocation.excel_writer.excel_writer",
        "documentation": {}
    },
    {
        "label": "ExcelWriterCharts",
        "kind": 6,
        "importPath": "web_allocation_project.allocation.excel_writer.excel_writer_charts",
        "description": "web_allocation_project.allocation.excel_writer.excel_writer_charts",
        "peekOfCode": "class ExcelWriterCharts:\n    def __init__(self, results_file_path):\n        self.results_file_path = results_file_path\n    def add_top_6_preferences_sat_pie_chart(self, top_6_preferences_satisfaction_ratios):\n        try:\n            wb = load_workbook(self.results_file_path)\n            ws = wb[\"Preferences Satisfaction\"]\n            if top_6_preferences_satisfaction_ratios:\n                avg_preferences_met = round(\n                    sum(top_6_preferences_satisfaction_ratios) / len(top_6_preferences_satisfaction_ratios), 2",
        "detail": "web_allocation_project.allocation.excel_writer.excel_writer_charts",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "web_allocation_project.allocation.ortools_sat.model",
        "description": "web_allocation_project.allocation.ortools_sat.model",
        "peekOfCode": "class Model:\n    def __init__(self, students, courses):\n        self.model = cp_model.CpModel()\n        self.students = students\n        self.all_students = range(len(students))\n        self.courses = courses\n        self.all_courses = range(len(courses))\n        self.allocation = []\n    def build_model(self):\n        # sorting students based on their gpa in descending order",
        "detail": "web_allocation_project.allocation.ortools_sat.model",
        "documentation": {}
    },
    {
        "label": "Solver",
        "kind": 6,
        "importPath": "web_allocation_project.allocation.ortools_sat.solver",
        "description": "web_allocation_project.allocation.ortools_sat.solver",
        "peekOfCode": "class Solver:\n    def __init__(self, model_obj):\n        self.model_obj = model_obj\n        self.solver = cp_model.CpSolver()\n        self.status = None\n    def solve_model(self):\n        # maximize student allocation based on their gpa and\n        # minimize student allocation based on their preferences\n        self.model_obj.model.maximize(\n            sum(",
        "detail": "web_allocation_project.allocation.ortools_sat.solver",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "web_allocation_project.allocation.student_course.course",
        "description": "web_allocation_project.allocation.student_course.course",
        "peekOfCode": "class Course:\n    def __init__(self, *args):\n        if len(args) == 0:\n            pass\n        else:\n            self.course_id = args[0]\n            self.course_name = args[1]\n            self.min_students = args[2]\n            self.max_students = args[3]",
        "detail": "web_allocation_project.allocation.student_course.course",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "web_allocation_project.allocation.student_course.student",
        "description": "web_allocation_project.allocation.student_course.student",
        "peekOfCode": "class Student:\n    def __init__(self, *args):\n        if len(args) == 0:\n            pass\n        else:\n            self.student_id = args[0]\n            self.fullname = args[1]\n            self.gpa = None\n            self.SCALING_FACTOR = 100\n            self.scaled_gpa = None",
        "detail": "web_allocation_project.allocation.student_course.student",
        "documentation": {}
    },
    {
        "label": "WebAllocationAppConfig",
        "kind": 6,
        "importPath": "web_allocation_project.web_allocation_app.apps",
        "description": "web_allocation_project.web_allocation_app.apps",
        "peekOfCode": "class WebAllocationAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'web_allocation_app'",
        "detail": "web_allocation_project.web_allocation_app.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_app.urls",
        "description": "web_allocation_project.web_allocation_app.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.home, name=\"home\"),\n    path(\"allocation/\", views.allocation, name=\"allocation\"),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "web_allocation_project.web_allocation_app.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "web_allocation_project.web_allocation_app.views",
        "description": "web_allocation_project.web_allocation_app.views",
        "peekOfCode": "def home(request):\n    request.session.set_expiry(0) \n    # session cookie will expire when the user’s web browser is closed\n    if request.method == \"POST\" and \"files-submit\" in request.POST:\n        request.session.flush()\n        students_data = request.FILES.get(\"students\", None)\n        courses_data = request.FILES.get(\"courses\", None)\n        students_selections_data = request.FILES.get(\"students_selections\", None)\n        sem = request.POST.get(\"sem\", None)\n        students_ext = os.path.splitext(students_data.name)[-1].lower()",
        "detail": "web_allocation_project.web_allocation_app.views",
        "documentation": {}
    },
    {
        "label": "json_serialization",
        "kind": 2,
        "importPath": "web_allocation_project.web_allocation_app.views",
        "description": "web_allocation_project.web_allocation_app.views",
        "peekOfCode": "def json_serialization(request, app_obj):\n    \"\"\"This method converts class objects to json files and\n    returns the selected students.\"\"\"\n    # for selected students table display\n    columns = [\"Ονοματεπώνυμο\", \"AEM\", \"ΜΟ\", \"Επιλογές\"]\n    data = {c: [] for c in columns}\n    for student in app_obj.students:\n        data[\"Ονοματεπώνυμο\"].append(student.fullname)\n        data[\"AEM\"].append(student.student_id)\n        data[\"ΜΟ\"].append(student.gpa)",
        "detail": "web_allocation_project.web_allocation_app.views",
        "documentation": {}
    },
    {
        "label": "get_context_from_session",
        "kind": 2,
        "importPath": "web_allocation_project.web_allocation_app.views",
        "description": "web_allocation_project.web_allocation_app.views",
        "peekOfCode": "def get_context_from_session(request):\n    selected_students = json.loads(request.session.get(\"selected_students\", \"[]\"))\n    allocated_students = json.loads(request.session.get(\"allocated_students\", \"[]\"))\n    non_100_allocated_students = json.loads(\n        request.session.get(\"non_100_allocated_students\", \"[]\")\n    )\n    return {\n        \"selected_students\": selected_students,\n        \"has_students\": request.session.get(\"has_students\", False),\n        \"allocated_students\": allocated_students,",
        "detail": "web_allocation_project.web_allocation_app.views",
        "documentation": {}
    },
    {
        "label": "json_deserialization",
        "kind": 2,
        "importPath": "web_allocation_project.web_allocation_app.views",
        "description": "web_allocation_project.web_allocation_app.views",
        "peekOfCode": "def json_deserialization(request):\n    \"\"\"This method converts json files to class objects and\n    returns the App object and the context.\"\"\"\n    context = get_context_from_session(request)\n    context.update(\n        {\n            \"selected_students\": pd.DataFrame(context[\"selected_students\"]),\n            \"allocated_students\": pd.DataFrame(context[\"allocated_students\"]),\n            \"non_100_allocated_students\": pd.DataFrame(\n                context[\"non_100_allocated_students\"]",
        "detail": "web_allocation_project.web_allocation_app.views",
        "documentation": {}
    },
    {
        "label": "delete_file_after_time",
        "kind": 2,
        "importPath": "web_allocation_project.web_allocation_app.views",
        "description": "web_allocation_project.web_allocation_app.views",
        "peekOfCode": "def delete_file_after_time(file_path, delay):\n    \"\"\"Deletes the specified file after a delay.\"\"\"\n    time.sleep(delay)\n    if os.path.exists(file_path):\n        os.remove(file_path)\ndef clear_context(request, context, min_stud, max_stud):\n    context.update(\n        {\n            \"allocated_students\": None,\n            \"has_allocated_students\": False,",
        "detail": "web_allocation_project.web_allocation_app.views",
        "documentation": {}
    },
    {
        "label": "clear_context",
        "kind": 2,
        "importPath": "web_allocation_project.web_allocation_app.views",
        "description": "web_allocation_project.web_allocation_app.views",
        "peekOfCode": "def clear_context(request, context, min_stud, max_stud):\n    context.update(\n        {\n            \"allocated_students\": None,\n            \"has_allocated_students\": False,\n            \"min_stud\": min_stud,\n            \"max_stud\": max_stud,\n            \"error_message\": request.session.get(\"error_message\"),\n            \"avg_preferences_ratio\": None,\n            \"non_100_allocated_students\": None,",
        "detail": "web_allocation_project.web_allocation_app.views",
        "documentation": {}
    },
    {
        "label": "allocation_data_preparation",
        "kind": 2,
        "importPath": "web_allocation_project.web_allocation_app.views",
        "description": "web_allocation_project.web_allocation_app.views",
        "peekOfCode": "def allocation_data_preparation(\n    request,\n    context,\n    allocated_students,\n    avg_preferences_ratio,\n    students_preferences_ratio,\n    courses,\n    min_stud,\n    max_stud\n):",
        "detail": "web_allocation_project.web_allocation_app.views",
        "documentation": {}
    },
    {
        "label": "allocation",
        "kind": 2,
        "importPath": "web_allocation_project.web_allocation_app.views",
        "description": "web_allocation_project.web_allocation_app.views",
        "peekOfCode": "def allocation(request):\n    \"\"\"\n    Handles the student-to-course allocation for table display.\n    Processes POST requests for allocation with the option of downloading results\n    and renders the allocation page.\n    \"\"\"\n    new_app, context = json_deserialization(request)\n    excel_path = os.getcwd() + \"\\output.xlsx\"\n    if request.method == \"POST\" and \"allocation-submit\" in request.POST:\n        min_stud = int(request.POST.get(\"min_stud\", 0))",
        "detail": "web_allocation_project.web_allocation_app.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.asgi",
        "description": "web_allocation_project.web_allocation_project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "web_allocation_project.web_allocation_project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-99=ox=(s32$in+$87i$c(^m-+c_9-@2-zcvv7#s6k1k=%*m&7j'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-99=ox=(s32$in+$87i$c(^m-+c_9-@2-zcvv7#s6k1k=%*m&7j'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'web_allocation_app'",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'web_allocation_app'\n]\nMIDDLEWARE = [",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'web_allocation_project.urls'",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "ROOT_URLCONF = 'web_allocation_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'web_allocation_project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"uploads\")\nMEDIA_URL = \"/uploads/\"\n# Default primary key field type",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"uploads\")\nMEDIA_URL = \"/uploads/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"uploads\")\nMEDIA_URL = \"/uploads/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"uploads\")\nMEDIA_URL = \"/uploads/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"uploads\")\nMEDIA_URL = \"/uploads/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"uploads\")\nMEDIA_URL = \"/uploads/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "MEDIA_URL = \"/uploads/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.settings",
        "description": "web_allocation_project.web_allocation_project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "web_allocation_project.web_allocation_project.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.urls",
        "description": "web_allocation_project.web_allocation_project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"\", include(\"web_allocation_app.urls\"))\n]",
        "detail": "web_allocation_project.web_allocation_project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "web_allocation_project.web_allocation_project.wsgi",
        "description": "web_allocation_project.web_allocation_project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "web_allocation_project.web_allocation_project.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "web_allocation_project.manage",
        "description": "web_allocation_project.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'web_allocation_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "web_allocation_project.manage",
        "documentation": {}
    }
]