[
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "SCALING_FACTOR",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "SCALING_FACTOR = 100\nstudents = [\"20046\", \"21110\", \"20000\"]\nstudents_gpa = [8.83, 6, 7.5] \nstudents_gpa_scaled = [x * SCALING_FACTOR for x in students_gpa]\nall_students = range(len(students))\ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \nall_courses = range(len(courses))\ncourses_min_size = [1, 1, 1] # min students for each course (int)",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "students = [\"20046\", \"21110\", \"20000\"]\nstudents_gpa = [8.83, 6, 7.5] \nstudents_gpa_scaled = [x * SCALING_FACTOR for x in students_gpa]\nall_students = range(len(students))\ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \nall_courses = range(len(courses))\ncourses_min_size = [1, 1, 1] # min students for each course (int)\ncourses_max_size = [3, 3, 3] # max students for each course (int)",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "students_gpa",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "students_gpa = [8.83, 6, 7.5] \nstudents_gpa_scaled = [x * SCALING_FACTOR for x in students_gpa]\nall_students = range(len(students))\ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \nall_courses = range(len(courses))\ncourses_min_size = [1, 1, 1] # min students for each course (int)\ncourses_max_size = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "students_gpa_scaled",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "students_gpa_scaled = [x * SCALING_FACTOR for x in students_gpa]\nall_students = range(len(students))\ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \nall_courses = range(len(courses))\ncourses_min_size = [1, 1, 1] # min students for each course (int)\ncourses_max_size = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "all_students",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "all_students = range(len(students))\ncourses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \nall_courses = range(len(courses))\ncourses_min_size = [1, 1, 1] # min students for each course (int)\ncourses_max_size = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "courses",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "courses = [\"Compilers\", \"Knowledge Mining\", \"Introduction to Robotics\"]\nrequired_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \nall_courses = range(len(courses))\ncourses_min_size = [1, 1, 1] # min students for each course (int)\ncourses_max_size = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "required_courses_per_student",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "required_courses_per_student = [3, 1, 0] \nextra_courses_per_student = [3, 2, 0] \nall_courses = range(len(courses))\ncourses_min_size = [1, 1, 1] # min students for each course (int)\ncourses_max_size = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "extra_courses_per_student",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "extra_courses_per_student = [3, 2, 0] \nall_courses = range(len(courses))\ncourses_min_size = [1, 1, 1] # min students for each course (int)\ncourses_max_size = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "all_courses",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "all_courses = range(len(courses))\ncourses_min_size = [1, 1, 1] # min students for each course (int)\ncourses_max_size = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "courses_min_size",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "courses_min_size = [1, 1, 1] # min students for each course (int)\ncourses_max_size = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\n# ...",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "courses_max_size",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "courses_max_size = [3, 3, 3] # max students for each course (int)\nmodel = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\n# ...\nmodel.minimize(",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "model = cp_model.CpModel()\nallocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\n# ...\nmodel.minimize(\n    sum(preferences_rank[s][c] * allocation[s][c] * students_gpa_scaled[s] ",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "allocation",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "allocation = [[model.new_bool_var(f\"allocation_{s}_{c}\") for c in all_courses] for s in all_students]\npreferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\n# ...\nmodel.minimize(\n    sum(preferences_rank[s][c] * allocation[s][c] * students_gpa_scaled[s] \n        for s in all_students ",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "preferences_rank",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "preferences_rank = [\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t[1, 3, 2],\n]\n# ...\nmodel.minimize(\n    sum(preferences_rank[s][c] * allocation[s][c] * students_gpa_scaled[s] \n        for s in all_students \n        for c in all_courses)",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "solver = cp_model.CpSolver()\nstatus = solver.solve(model)\nif status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:\n    for c in all_courses:\n        print(f\"{courses[c]}:\\n\")\n        print(f\"{\"Course\":<20} {\"GPA\":<20} {\"Preference\":<20} \\n\")\n        for s in all_students:\n            if solver.value(allocation[s][c]): \n                print(f\"{students[s]:<20} {(students_gpa_scaled[s]/SCALING_FACTOR):<20} {preferences_rank[s][c]:<20}\")\n    print()",
        "detail": "allocation",
        "documentation": {}
    },
    {
        "label": "status",
        "kind": 5,
        "importPath": "allocation",
        "description": "allocation",
        "peekOfCode": "status = solver.solve(model)\nif status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:\n    for c in all_courses:\n        print(f\"{courses[c]}:\\n\")\n        print(f\"{\"Course\":<20} {\"GPA\":<20} {\"Preference\":<20} \\n\")\n        for s in all_students:\n            if solver.value(allocation[s][c]): \n                print(f\"{students[s]:<20} {(students_gpa_scaled[s]/SCALING_FACTOR):<20} {preferences_rank[s][c]:<20}\")\n    print()\nelse:",
        "detail": "allocation",
        "documentation": {}
    }
]