    # based on requirements of the document to fix infeasibility
    # it would have more sense if the min was decreasing until 0 and the max was increasing until a limit e.g. 40
    # to find a feasible solution if not optimal

    def fix_max_students_in_course(self, course_idx = None):
        if course_idx is not None:
            self.model_obj.courses[course_idx].max_students -= 1
            print(f"Reducing max students for course {self.model_obj.courses[course_idx].course_name}"
                    f" to {self.model_obj.courses[course_idx].max_students}.")
        else:
            for c in self.model_obj.all_courses:
                self.model_obj.courses[c].max_students -= 1
            print("Reducing max students for all courses by 1.")

        for c in self.model_obj.all_courses:
            print(f"Current value of max number of students in {self.model_obj.courses[c].course_name}"
                    f" = {self.model_obj.courses[c].max_students}")

            if self.model_obj.courses[c].max_students < self.model_obj.courses[c].min_students:
                print(f"Infeasible solution - max number of students in course"
                        f" {self.model_obj.courses[c].course_name} "
                        f"is below its minimum number ({self.model_obj.courses[c].min_students}).")
                sys.exit(0)

        # solve the model again with the new values of max number of students
        self.model_obj = self.model_obj.build_model()

        self.solve_model()

        if self.status in [cp_model.OPTIMAL, cp_model.FEASIBLE]:
            print("Found feasible solution after reducing max students.")
            to_excel = ExcelWriter(self.model_obj, self.solver)
            to_excel.save_results()
            to_excel.save_sat_preferences()
            sys.exit(0)

    # alternative method for the objective functions

    # def solve_model(self):
    #     # maximize student allocation based on their gpa
    #     self.model_obj.model.maximize(
    #         sum(self.model_obj.students[s].scaled_gpa * self.model_obj.allocation[s][c]
    #             for s in self.model_obj.all_students
    #             for c in self.model_obj.all_courses)
    #     )
    #
    #     # self.solver.parameters.log_search_progress = True
    #     self.status = self.solver.solve(self.model_obj.model)
    #
    #     if self.status in [cp_model.OPTIMAL, cp_model.FEASIBLE]:
    #         maximized_gpa_allocation = [
    #             [self.solver.value(self.model_obj.allocation[s][c]) for c in self.model_obj.all_courses] for s in
    #             self.model_obj.all_students]
    #
    #         for s in self.model_obj.all_students:
    #             for c in self.model_obj.all_courses:
    #                 self.model_obj.model.add_hint(self.model_obj.allocation[s][c], maximized_gpa_allocation[s][c])
    #
    #         # minimize student allocation based on their preferences
    #         self.model_obj.model.minimize(
    #             sum(self.model_obj.students[s].preferences[self.model_obj.courses[c].course_id] *
    #                 self.model_obj.allocation[s][c]
    #                 for s in self.model_obj.all_students
    #                 for c in self.model_obj.all_courses)
    #         )
    #
    #         # self.solver.parameters.log_search_progress = True
    #         self.status = self.solver.solve(self.model_obj.model)
    #
    #         if self.status in [cp_model.OPTIMAL, cp_model.FEASIBLE]:
    #             to_excel = ExcelWriter(self.model_obj, self.solver)
    #             to_excel.write_results()
    #             to_excel.write_sat_preferences()
    #             return
    #
    #     print("Infeasible solution.")
    #     self.fix_max_students_in_course()

