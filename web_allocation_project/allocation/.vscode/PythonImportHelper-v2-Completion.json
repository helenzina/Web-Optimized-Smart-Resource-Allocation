[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "allocation.ortools_sat.model",
        "description": "allocation.ortools_sat.model",
        "isExtraImport": true,
        "detail": "allocation.ortools_sat.model",
        "documentation": {}
    },
    {
        "label": "Solver",
        "importPath": "allocation.ortools_sat.solver",
        "description": "allocation.ortools_sat.solver",
        "isExtraImport": true,
        "detail": "allocation.ortools_sat.solver",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "allocation.student_course.course",
        "description": "allocation.student_course.course",
        "isExtraImport": true,
        "detail": "allocation.student_course.course",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "allocation.student_course.student",
        "description": "allocation.student_course.student",
        "isExtraImport": true,
        "detail": "allocation.student_course.student",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl.reader.excel",
        "description": "openpyxl.reader.excel",
        "isExtraImport": true,
        "detail": "openpyxl.reader.excel",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl.reader.excel",
        "description": "openpyxl.reader.excel",
        "isExtraImport": true,
        "detail": "openpyxl.reader.excel",
        "documentation": {}
    },
    {
        "label": "PieChart",
        "importPath": "openpyxl.chart",
        "description": "openpyxl.chart",
        "isExtraImport": true,
        "detail": "openpyxl.chart",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "openpyxl.chart",
        "description": "openpyxl.chart",
        "isExtraImport": true,
        "detail": "openpyxl.chart",
        "documentation": {}
    },
    {
        "label": "BarChart",
        "importPath": "openpyxl.chart",
        "description": "openpyxl.chart",
        "isExtraImport": true,
        "detail": "openpyxl.chart",
        "documentation": {}
    },
    {
        "label": "DataLabelList",
        "importPath": "openpyxl.chart.label",
        "description": "openpyxl.chart.label",
        "isExtraImport": true,
        "detail": "openpyxl.chart.label",
        "documentation": {}
    },
    {
        "label": "Legend",
        "importPath": "openpyxl.chart.legend",
        "description": "openpyxl.chart.legend",
        "isExtraImport": true,
        "detail": "openpyxl.chart.legend",
        "documentation": {}
    },
    {
        "label": "DataPoint",
        "importPath": "openpyxl.chart.marker",
        "description": "openpyxl.chart.marker",
        "isExtraImport": true,
        "detail": "openpyxl.chart.marker",
        "documentation": {}
    },
    {
        "label": "get_column_letter",
        "importPath": "openpyxl.utils",
        "description": "openpyxl.utils",
        "isExtraImport": true,
        "detail": "openpyxl.utils",
        "documentation": {}
    },
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "cp_model",
        "importPath": "ortools.sat.python",
        "description": "ortools.sat.python",
        "isExtraImport": true,
        "detail": "ortools.sat.python",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "ExcelWriter",
        "importPath": "allocation.excel_writer.excel_writer",
        "description": "allocation.excel_writer.excel_writer",
        "isExtraImport": true,
        "detail": "allocation.excel_writer.excel_writer",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "class App:\n    def __init__(self, *args):\n        if len(args) == 0:\n            pass\n        else:\n            self.sem = args[6]\n            self.min_stud = args[7]\n            self.max_stud = args[8]\n            self.students = self.load_data(args[0], args[1], \"students\")\n            self.courses = self.load_data(args[2], args[3], \"courses\")",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "ExcelReader",
        "kind": 6,
        "importPath": "app.excel_reader",
        "description": "app.excel_reader",
        "peekOfCode": "class ExcelReader:\n    def __init__(self, file_name, sheet_name, sem, min_stud, max_stud):\n        self.file_name = file_name\n        self.sheet_name = sheet_name\n        self.sem = sem\n        self.min_stud = min_stud\n        self.max_stud = max_stud\n    def read_students(self):\n        try:\n            df_sheets = pd.read_excel(self.file_name, self.sheet_name)",
        "detail": "app.excel_reader",
        "documentation": {}
    },
    {
        "label": "ExcelWriter",
        "kind": 6,
        "importPath": "excel_writer.excel_writer",
        "description": "excel_writer.excel_writer",
        "peekOfCode": "class ExcelWriter:\n    def __init__(self, model_obj, solver):\n        self.data_path = os.getcwd()\n        self.results_file_path = self.data_path + \"\\output.xlsx\"\n        self.model_obj = model_obj\n        self.solver = solver\n        self.add_charts = ExcelWriterCharts(self.results_file_path)\n    def write_results(self):\n        results_data = []\n        for c in self.model_obj.all_courses:",
        "detail": "excel_writer.excel_writer",
        "documentation": {}
    },
    {
        "label": "ExcelWriterCharts",
        "kind": 6,
        "importPath": "excel_writer.excel_writer_charts",
        "description": "excel_writer.excel_writer_charts",
        "peekOfCode": "class ExcelWriterCharts:\n    def __init__(self, results_file_path):\n        self.results_file_path = results_file_path\n    def add_top_6_preferences_sat_pie_chart(self, top_6_preferences_satisfaction_ratios):\n        try:\n            wb = load_workbook(self.results_file_path)\n            ws = wb[\"Preferences Satisfaction\"]\n            if top_6_preferences_satisfaction_ratios:\n                avg_preferences_met = round(\n                    sum(top_6_preferences_satisfaction_ratios) / len(top_6_preferences_satisfaction_ratios), 2",
        "detail": "excel_writer.excel_writer_charts",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "ortools_sat.model",
        "description": "ortools_sat.model",
        "peekOfCode": "class Model:\n    def __init__(self, students, courses):\n        self.model = cp_model.CpModel()\n        self.students = students\n        self.all_students = range(len(students))\n        self.courses = courses\n        self.all_courses = range(len(courses))\n        self.allocation = []\n    def build_model(self):\n        # sorting students based on their gpa in descending order",
        "detail": "ortools_sat.model",
        "documentation": {}
    },
    {
        "label": "Solver",
        "kind": 6,
        "importPath": "ortools_sat.solver",
        "description": "ortools_sat.solver",
        "peekOfCode": "class Solver:\n    def __init__(self, model_obj):\n        self.model_obj = model_obj\n        self.solver = cp_model.CpSolver()\n        self.status = None\n    def solve_model(self):\n        # maximize student allocation based on their gpa and\n        # minimize student allocation based on their preferences\n        self.model_obj.model.maximize(\n            sum(",
        "detail": "ortools_sat.solver",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "student_course.course",
        "description": "student_course.course",
        "peekOfCode": "class Course:\n    def __init__(self, *args):\n        if len(args) == 0:\n            pass\n        else:\n            self.course_id = args[0]\n            self.course_name = args[1]\n            self.min_students = args[2]\n            self.max_students = args[3]",
        "detail": "student_course.course",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "student_course.student",
        "description": "student_course.student",
        "peekOfCode": "class Student:\n    def __init__(self, *args):\n        if len(args) == 0:\n            pass\n        else:\n            self.student_id = args[0]\n            self.fullname = args[1]\n            self.gpa = None\n            self.SCALING_FACTOR = 100\n            self.scaled_gpa = None",
        "detail": "student_course.student",
        "documentation": {}
    }
]